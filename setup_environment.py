#!/usr/bin/env python3
"""
Environment Setup Script for WMS Application
This script helps you configure your environment variables interactively.
"""

import os
import getpass
import secrets
import string

def generate_secret_key(length=50):
    """Generate a secure secret key"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for i in range(length))

def get_user_input(prompt, default=None, sensitive=False):
    """Get user input with optional default value"""
    if default:
        display_prompt = f"{prompt} [{default}]: "
    else:
        display_prompt = f"{prompt}: "
    
    if sensitive:
        value = getpass.getpass(display_prompt)
        if not value and default:
            return default
        return value
    else:
        value = input(display_prompt)
        if not value and default:
            return default
        return value

def setup_environment():
    """Interactive environment setup"""
    print("=== WMS Application Environment Setup ===")
    print("This script will help you create a .env file with your configuration.")
    print()
    
    # Flask Configuration
    print("1. Flask Configuration")
    session_secret = get_user_input("Session Secret (leave blank to auto-generate)", 
                                   generate_secret_key())
    print()
    
    # Database Configuration
    print("2. Database Configuration")
    print("Choose your database type:")
    print("1. MySQL (Recommended for local development)")
    print("2. PostgreSQL (Automatically configured on Replit)")
    print("3. SQL Server (Local development)")
    print("4. Skip database configuration")
    
    db_choice = get_user_input("Enter choice (1-4)", "1")
    
    mysql_config = {}
    postgresql_config = {}
    mssql_config = {}
    
    if db_choice == "1":
        print("\nMySQL Configuration:")
        mysql_config['host'] = get_user_input("MySQL Host", "localhost")
        mysql_config['user'] = get_user_input("MySQL User", "root")
        mysql_config['password'] = get_user_input("MySQL Password", sensitive=True)
        mysql_config['database'] = get_user_input("MySQL Database", "wms_db")
    elif db_choice == "2":
        print("\nPostgreSQL Configuration:")
        postgresql_config['url'] = get_user_input("PostgreSQL URL", 
                                                 "postgresql://username:password@localhost:5432/wms_db")
    elif db_choice == "3":
        print("\nSQL Server Configuration:")
        mssql_config['server'] = get_user_input("SQL Server", "localhost\\SQLEXPRESS")
        mssql_config['user'] = get_user_input("SQL Server User", "sa")
        mssql_config['password'] = get_user_input("SQL Server Password", sensitive=True)
        mssql_config['database'] = get_user_input("SQL Server Database", "WMS_DB")
        mssql_config['driver'] = get_user_input("ODBC Driver", "ODBC Driver 17 for SQL Server")
    
    print()
    
    # SAP B1 Configuration
    print("3. SAP B1 Integration Configuration")
    sap_server = get_user_input("SAP B1 Server URL", "https://192.168.1.5:50000")
    sap_username = get_user_input("SAP B1 Username", "manager")
    sap_password = get_user_input("SAP B1 Password", "Ea@12345", sensitive=True)
    sap_company_db = get_user_input("SAP B1 Company Database", "Test_Hutchinson")
    
    print()
    
    # Generate .env file
    env_content = f"""# WMS Application Environment Configuration
# Generated by setup_environment.py

# Flask Configuration
SESSION_SECRET={session_secret}

"""
    
    if mysql_config:
        env_content += f"""# Database Configuration - MySQL
MYSQL_HOST={mysql_config['host']}
MYSQL_USER={mysql_config['user']}
MYSQL_PASSWORD={mysql_config['password']}
MYSQL_DATABASE={mysql_config['database']}

"""
    
    if postgresql_config:
        env_content += f"""# Database Configuration - PostgreSQL
DATABASE_URL={postgresql_config['url']}

"""
    
    if mssql_config:
        env_content += f"""# Database Configuration - SQL Server
MSSQL_SERVER={mssql_config['server']}
MSSQL_USER={mssql_config['user']}
MSSQL_PASSWORD={mssql_config['password']}
MSSQL_DATABASE={mssql_config['database']}
MSSQL_DRIVER={mssql_config['driver']}

"""
    
    env_content += f"""# SAP B1 Integration Configuration
SAP_B1_SERVER={sap_server}
SAP_B1_USERNAME={sap_username}
SAP_B1_PASSWORD={sap_password}
SAP_B1_COMPANY_DB={sap_company_db}

# Application Settings
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("âœ… .env file created successfully!")
    print()
    print("Next steps:")
    print("1. Review the .env file and make any necessary adjustments")
    print("2. Run 'python complete_migration.py' to set up your database")
    print("3. Start your application")
    print()
    print("Your .env file has been created with the following configuration:")
    print(f"- Database: {db_choice}")
    print(f"- SAP B1 Server: {sap_server}")
    print(f"- Company Database: {sap_company_db}")

if __name__ == "__main__":
    try:
        setup_environment()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\nError during setup: {e}")
        print("Please create the .env file manually using .env.example as a template.")